.. _design_uc02 :

Conduct on-demand processing
============================

This use case aims at using TEP Urban for submitting processing on demand driven by the Area of interest search or the data selection


On demand data processing from portal
-------------------------------------

Some dataset can be asked on demand by the user to the production center.

Next figure depicts the sequence that consists of requesting a processing on demand based on a previous dataset selection as described in :ref:`design_uc01_dds`.


.. uml::
  :caption: On demand data processing submission
  :align: center


  actor "User" as U
  participant "Portal" as P
  database "Portal database" as PDB
  participant "Web Processing Service" as WPS

  U -> P : Select processing service
  P -> U : Processing service description (input, output...)

  alt direct remote WPS

  U -> WPS : submit WPS execute request
  activate WPS
  WPS -> U : WPS process id
  deactivate WPS
  U -> P : save processing job information
  activate P
  P -> PDB : save job
  P -> U : return job id
  deactivate P

  else proxied remote WPS

  U -> P : submit WPS execute request
  activate P
  P -> P : proxy WPS request
  activate P #DarkSalmon
  P -> WPS : submit WPS execute request
  activate WPS
  WPS -> P : WPS process id
  deactivate WPS
  deactivate P
  P -> U : WPS process id
  U -> P : save processing job information
  P -> PDB : save job
  P -> U : return job id
  deactivate P

  end


.. warning:: 
  
  This scenario illustration does not take into account the quota and credit management on purpose for readibility reason. All details about accounting operations that may apply to this scenario are described in the :ref:`dynamic_accounting` section.



Processing execution in the processing centers
----------------------------------------------

    
.. todo:: *BC* sequence diagram and description of the execution of the job inside the processing center

.. uml::
  :caption: Execute request
  :align: center


  participant "Portal"
  participant "WPS"
  participant "Production Control" as PC
  participant "Scheduler"
  participant "Processor"
  participant "Staging"

  alt synchronous

	  activate Scheduler
	  Portal -> WPS : Execute request
	  
	  activate WPS
	  WPS -> PC : send request to the selected processor
	  
	  activate PC
	  PC -> Scheduler : send processing request
	  
	  Scheduler -> Processor : perform job
	  
	  activate Processor
	  PC -> PC : start monitoring thread
	  activate PC #Green
	  PC -> Processor : check if the job is finished
	  Processor -> PC : job status
	  note right : job in progress
	  
	  Processor -> Staging : send the products
	  deactivate Processor
	  activate Staging
	  
	  PC -> Processor : check if the job is finished
	  Processor -> PC : job status
	  note right #00B200 : <color:white>job finished</color>
	  
	  PC -> Staging : check if the staging is finished
	  Staging -> PC : staging status
	  note right : staging in progress
	  deactivate Staging
	  
	  PC -> Staging : check if the staging is finished
	  Staging -> PC : product URL(s)
	  note right #00B200 : <color:white>staging finished</color>
	  
	  PC -> WPS : product URL(s)
	  deactivate PC
	  deactivate PC
	  
	  WPS -> Portal : product URL(s)
	  deactivate WPS

  else asynchronous

	  Portal -> WPS : Execute request
	  activate WPS
	  WPS -> PC : send request to the selected processor
	  
	  activate PC
	  PC -> Scheduler : send processing request
	  Scheduler -> PC : job ID
	  
	  PC -> WPS : job ID
	  WPS -> Portal : job ID
	  deactivate WPS
	  
	  Scheduler -> Processor : perform job
	  
	  activate Processor
	  PC -> PC : start monitoring thread
	  activate PC #Green
	  
	  Portal -> WPS : GetStatus request
	  activate WPS
	  WPS -> PC : check if the job is finished
	  
	  PC -> Processor : check if the job is finished
	  Processor -> PC : job progress
	  note right : job in progress
	  PC -> WPS : job progress
	  WPS -> Portal : job progress
	  deactivate WPS
	  
	  Processor -> Staging : send the products
	  deactivate Processor
	  activate Staging
	  
	  Portal -> WPS : GetStatus request
	  activate WPS
	  WPS -> PC : check if the job is finished
	  
	  PC -> Processor : check if the job is finished
	  Processor -> PC : job progress
	  note right #00B200 : <color:white>job finished</color>
	  PC -> Staging : check if the staging is finished
	  Staging -> PC : staging status
	  note right : staging in progress
	  PC -> WPS : job progress
	  WPS -> Portal : job progress
	  deactivate WPS
	  
	  
	  deactivate Staging
	  
	  Portal -> WPS : GetStatus request
	  activate WPS
	  WPS -> PC : check if the job is finished
	  
	  PC -> Processor : check if the job is finished
	  Processor -> PC : job progress
	  note right #00B200 : <color:white>job finished</color>
	  PC -> Staging : check if the staging is finished
	  Staging -> PC : product URL(s)
	  note right #00B200 : <color:white>staging finished</color>
	  PC -> WPS : product URL(s)
	  deactivate PC
	  deactivate PC
	  WPS -> Portal : product URL(s)
	  deactivate WPS
	  

  end

5)  Processing center generates the new product.
    
.. todo:: *BC* sequence diagram and description of the gneneration of the products

9)  New product is registered to the catalogue and result report to the portal, where the user can visualise the result and decide if chosen parameter setting was sufficient.
   
.. todo:: *BC* sequence diagram and description of the product registration at the catalogue



Further visualization and data analysis options on the produced data are detailed in the :ref:`_design_uc01` section.

.. _design_uc01_dds :





